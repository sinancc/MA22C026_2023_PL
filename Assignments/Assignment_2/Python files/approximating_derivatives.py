# -*- coding: utf-8 -*-
"""Approximating derivatives.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tfQWHNHPHviDswfUZyunV3kQUaiHzqWB
"""

def D2(f, x, h=1E-6):
  return (f(x-h) -2*f(x) + f(x+h)) / (h*h)
#defining a function for the central difference formula

from math import sin
D2(sin,0.2)
#we are finding second derivative of sin at 0.2

-sin(0.2)
#validating the approximation with actual one

def g(x):
  return sin(2*x)
D2(g, 0.2)
#trying for another function sin(2x)

D2(lambda x: sin(2*x), 0.2) # central diff approximation
#using lambda

-4*sin(2* 0.2) # actual 2nd derivative value

print(' h D2 Result Error')
for k in range(4,8):
  h = 2**(-k) #taking some values for h like 1/16,1/32..1/128
  d2g = D2(lambda x: x**-6, 1, h=h) #Defining function using lambdas f=x^-6
  e = d2g -42 #we substract 42 from d2g s as 42 is the actual second derivative
  print('%.0e %.5f %7.6f' %(h, d2g, e))
#e for exponential format,f for floating number ,integer before . for total digits in output and integer after . for total decimal points in output

for k in range(1,14):
  h = 10**(-k)
  d2g = D2(lambda x: x**-6,1, h)
  print('%.0e %18.5f' %(h, d2g))
#showing limitations of machines